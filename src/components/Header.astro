---
import { SITE_TITLE } from '../consts';
---

<header id="large-header" class="h-screen bg-stone-900">
  <div
    id="small-header"
    class="absolute bottom-0 sm:hidden h-20 p-6 w-full bg-stone-900 border border-green-400"
  >
    <span
      id="small-header-title"
      class="text-2xl text-white font-bold opacity-0 transition-opacity"
    >
      {SITE_TITLE}
    </span>
  </div>
  <div
    class="fixed top-6 right-6 flex flex-col items-center space-y-2 border border-green-400"
  >
    <div class="w-8 h-1 bg-white"></div>
    <div class="w-10 h-1 bg-white"></div>
    <div class="w-8 h-1 bg-white"></div>
  </div>
  <h1
    class="text-4xl py-4 text-white tracking-wider font-bold border border-green-400"
  >
    {SITE_TITLE}
  </h1>
  <div class="text-xl text-green-400 font-bold border border-green-400">
    <div class="i-ph-code-bold"></div>
    <div class="i-ph-map-trifold-bold"></div>
    <div class="i-ph-bicycle-fill"></div>
  </div>
  <nav class="text-xl uppercase text-white border border-green-400">
    <a href="#">Home</a>
    <a href="#bio">Bio</a>
    <a href="#skills">Skills</a>
    <a href="#experiences">Experiences</a>
    <a href="#contact">Contact</a>
  </nav>
</header>
<style>
  header {
    margin: 0em 0 2em;
  }
  h2 {
    margin: 0.5em 0;
  }
</style>

<script>
  const LARGE_HEADER_ID = 'large-header';
  const SMALL_HEADER_ID = 'small-header';
  const SMALL_HEADER_TITLE = 'small-header-title';
  const inClasses = ['absolute', 'bottom-0'];
  const outClasses = ['fixed', 'top-0'];
  const toggleSmallHeader = (entries: IntersectionObserverEntry[]) => {
    const [entry] = entries;
    if (!entry) return;
    const headerElement = document.getElementById(
      SMALL_HEADER_ID
    ) as HTMLDivElement;
    const titleElement = document.getElementById(
      SMALL_HEADER_TITLE
    ) as HTMLSpanElement;
    if (entry.isIntersecting) {
      headerElement.classList.add(...inClasses);
      headerElement.classList.remove(...outClasses);
      titleElement.classList.add('opacity-0');
      titleElement.classList.remove('opacity-100');
    } else {
      headerElement.classList.remove(...inClasses);
      headerElement.classList.add(...outClasses);
      titleElement.classList.remove('opacity-0');
      titleElement.classList.add('opacity-100');
    }
  };

  const observer = new IntersectionObserver(toggleSmallHeader, {
    rootMargin: '-90px 0px -90px 0px',
  });
  observer.observe(document.getElementById(LARGE_HEADER_ID) as HTMLElement);
</script>
